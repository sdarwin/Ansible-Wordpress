---

- name: install mysql packages (Debian)
  apt:
    name: "{{ wordpress_packages_mysql }}"
    state: present
    update_cache: true
  when: ansible_os_family == "Debian"

- name: install mysql packages (RHEL)
  yum:
    name: "{{ wordpress_packages_mysql }}"
    state: present
    update_cache: true
  when: ansible_os_family == "RedHat"

- name: install boto pip module
  pip:
    name:
      - boto
      - boto3

- name: install PyMySQL module
  pip:
    name: PyMySQL

- name: ensure mysql is running and starts on boot
  service: name={{ wordpress_mysql_service }} state=started enabled=true

- name: Creates mysql_path
  file:
    path: "{{ wordpress_mysql_path }}"
    state: directory
    owner: root
    group: root

- name: add mysql.cnf config
  template:
    src: mysql.cnf.j2
    dest: "{{ wordpress_mysql_path }}/wordpress.cnf"
    owner: root
    group: root
    mode: 0644
  notify: restart mysql

- name: ensure anonymous users are not in the database
  mysql_user:
    name: ''
    host: "{{ item }}"
    login_unix_socket: "{{ mysql_socket }}"
    state: absent
  with_items:
    - localhost
    - 127.0.0.1
    - "%"
    - ::1
    - "{{ inventory_hostname }}"
    - "{{ ansible_hostname }}"

- name: create downloads directory
  file:
    path: /opt/downloads
    state: directory
    mode: 0755

- name: download s3 backup of the database
  aws_s3:
    bucket: "{{ wordpress_s3_bucket }}"
    object: "{{ wordpress_s3_path }}/{{ wordpress_sql_file }}"
    dest: "/opt/downloads/{{ wordpress_sql_file }}"
    aws_access_key: "{{ wordpress_aws_access_key }}"
    aws_secret_key: "{{ wordpress_aws_secret_key }}"
    mode: get
  ignore_errors: "{{ wordpress_ignore_s3_errors }}"

- name: Check if s3 path exists now
  stat:
    path: /opt/downloads/{{ wordpress_sql_file }}
  register: wordpress_check_s3_path

- name: And then place s3 path check in variable
  set_fact:
    wordpress_check_s3_path_exists: "{{ wordpress_check_s3_path.stat.exists }}"

- name: create db
  mysql_db:
    login_unix_socket: "{{ mysql_socket }}"
    name: "{{ wordpress_database_name }}"
  notify: import database

- name: create application db account
  mysql_user:
    login_unix_socket: "{{ mysql_socket }}"
    name: "{{ wordpress_database_username }}"
    host: '%'
    password: "{{ wordpress_database_password }}"
    priv: "{{ wordpress_database_name }}.*:ALL"

- name: update mysql root password
  mysql_user:
    name: root
    host: "{{ item }}"
    login_unix_socket: "{{ mysql_socket }}"
    password: "{{ wordpress_database_root_password }}"
  with_items:
    - 127.0.0.1
    - "%"
    - ::1
    - "{{ inventory_hostname }}"
    - "{{ ansible_hostname }}"
    - localhost

- name: create user .my.cnf file with root password credentials
  template:
    src: .my.cnf
    dest: ~/.my.cnf
    mode: 0600
  become: false

- name: create root .my.cnf file with root password credentials
  template:
    src: .my.cnf
    dest: /root/.my.cnf
    mode: 0600
